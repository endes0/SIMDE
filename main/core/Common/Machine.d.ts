import { Register } from './Register';
import { FunctionalUnit } from './FunctionalUnit';
import { Memory } from './Memory';
import { MachineStatus } from './MachineStatus';
export declare class Machine {
    protected static LAT_MAX: number[];
    protected static LAT_MIN: number[];
    protected static LAT_DEF: number[];
    protected static NUF_MAX: number[];
    protected static NUF_MIN: number[];
    protected static NUF_DEF: number[];
    protected static MEMORYFAILLATENCYDEF: number;
    protected static MEMORYFAILLATENCYMIN: number;
    protected static MEMORYFAILLATENCYMAX: number;
    protected static WORD_SIZE: number;
    protected static NGP: number;
    protected static NFP: number;
    _functionalUnitNumbers: number[];
    protected _functionalUnitLatencies: number[];
    protected _memoryFailLatency: number;
    protected _gpr: Register;
    protected _fpr: Register;
    protected _functionalUnit: FunctionalUnit[][];
    protected _memory: Memory;
    protected _pc: number;
    protected _status: MachineStatus;
    constructor();
    init(reset: boolean): void;
    execute(): void;
    stop(): void;
    reset(): void;
    getTotalFunctionalUnit(): number;
    functionalUnitNumbers: number[];
    functionalUnitLatencies: number[];
    memoryFailLatency: number;
    getGpr(index: number): number;
    setGpr(index: number, value: number): void;
    getFpr(index: number): number;
    setFpr(index: number, value: number): void;
    functionalUnit: FunctionalUnit[][];
    memory: Memory;
    pc: number;
    status: MachineStatus;
    readonly gpr: Register;
    readonly fpr: Register;
    setFunctionalUnitNumber(index: number, quantity: number): void;
    setFunctionalUnitLatency(index: number, latency: number): void;
}
