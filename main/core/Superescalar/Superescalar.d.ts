import { Machine } from '../Common/Machine';
import { Code } from '../Common/Code';
import { ReorderBufferEntry } from './ReorderBufferEntry';
import { PrefetchEntry } from './PrefetchEntry';
import { DecoderEntry } from './DecoderEntry';
import { ReserveStationEntry } from './ReserveStationEntry';
import { FunctionalUnit, FunctionalUnitType } from '../Common/FunctionalUnit';
import { Queue } from '../Collections/Queue';
import { Instruction } from '../Common/Instruction';
import { CommitStatus, SuperescalarStatus } from './SuperescalarEnums';
export declare class Superescalar extends Machine {
    private static PREDTABLEBITS;
    private static PREDTABLESIZE;
    private static ISSUE_DEF;
    private _issue;
    private _code;
    private _ROBGpr;
    private _ROBFpr;
    private _reserveStationEntry;
    private _reorderBuffer;
    private _prefetchUnit;
    private _decoder;
    private _aluMem;
    private _jumpPrediction;
    constructor();
    init(reset: boolean): void;
    ticPrefetch(): number;
    getReserveStationSize(type: FunctionalUnitType): number;
    ticDecoder(): number;
    checkRegister(register: number, floatingPoint: boolean, reserveStationEntry: ReserveStationEntry, j: boolean): void;
    issueInstruction(instruction: Instruction, type: number, robIndex: number): void;
    ticIssue(): number;
    checkStore(robIndex: number, address: number): boolean;
    executeInstruction(type: FunctionalUnitType, num: number): void;
    ticExecute(): void;
    writeInstruction(type: FunctionalUnitType, num: number): void;
    ticWriteResult(): void;
    checkJump(rob: ReorderBufferEntry): boolean;
    ticCommit(): CommitStatus;
    tic(): SuperescalarStatus;
    changePrediction(address: number, result: boolean): void;
    prediction(address: number): boolean;
    code: Code;
    issue: number;
    ROBGpr: number[];
    ROBFpr: number[];
    reserveStationEntry: ReserveStationEntry[][];
    reorderBuffer: Queue<ReorderBufferEntry>;
    prefetchUnit: Queue<PrefetchEntry>;
    decoder: Queue<DecoderEntry>;
    aluMem: FunctionalUnit[];
    jumpPrediction: number[];
}
